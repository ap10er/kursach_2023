<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/client/ClientApp.java;D:/kursach/k1/src/main/java/Database/Connector.java;D:/kursach/k1/src/main/java/Database/TestDatabaseConnect.java;D:/kursach/k1/src/main/java/Pages/AddEmployee.java;D:/kursach/k1/src/main/java/Pages/CalculateSalaryAdminPage.java;D:/kursach/k1/src/main/java/Pages/CalculateSalaryUserPage.java;D:/kursach/k1/src/main/java/Pages/Employees.java;D:/kursach/k1/src/main/java/Pages/HelpPage.java;D:/kursach/k1/src/main/java/Pages/LoginPage.java;D:/kursach/k1/src/main/java/Pages/Main.java;D:/kursach/k1/src/main/java/Pages/MainAdminPage.java;D:/kursach/k1/src/main/java/Pages/MainUserPage.java;D:/kursach/k1/src/main/java/Pages/MessagePage.java;D:/kursach/k1/src/main/java/Pages/PenaltiesPage.java;D:/kursach/k1/src/main/java/Pages/RegPage.java;D:/kursach/k1/src/main/java/Pages/SearchEmployee.java;D:/kursach/k1/src/main/java/Pages/ShowPenaltiesPage.java;D:/kursach/k1/src/main/java/Pages/UserEditInfoPage.java;D:/kursach/k1/src/main/java/Pages/UserNotifications.java;D:/kursach/k1/src/main/java/Pages/UserPage.java;D:/kursach/k1/src/main/java/Pages/UserStatsPage.java;D:/kursach/k1/src/main/java/Pages/UserTicketsPage.java;D:/kursach/k1/src/main/java/server/ClientHandler.java;D:/kursach/k1/src/main/java/server/Server.java;D:/kursach/k1/src/main/java/module-info.java;D:/kursach/k1/pom.xml" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;D:/kursach/k1&quot;:&quot;{\&quot;/src/main/java/Pages/MessagePage.java\&quot;:\&quot;This Java file defines the MessagePage class which handles the functionality of a message page UI in a JavaFX application.\\n\\nKey functions:\\n\\n- initialize() - Sets event handlers for buttons like back, send, show, delete, save to file.\\n\\n- sendMessage() - Sends a new message by inserting a record into the messages database table. Validates input.\\n\\n- deleteMessage() - Deletes a message by username by executing a DELETE query. \\n\\n- showMessage() - Retrieves and displays messages for a username by executing a SELECT query.\\n\\n- saveMessagesToFile() - Exports all messages from the database to a text file.\\n\\n- showAlert() - Displays an alert popup window.\\n\\nThe class connects to a MySQL database using JDBC to perform CRUD operations on the messages table. It provides functionality to send, retrieve, delete messages and export them to a file from the database via the UI controls. The initialize() method wires up all the button click handlers to call these functions.\\n\\nSo in summary, it manages the message page UI and integrates with a MySQL database for message data persistence and retrieval.\&quot;,\&quot;/src/main/java/Pages/UserNotifications.java\&quot;:\&quot;This Java file defines a UserNotifications class that handles user notifications functionality.\\n\\nKey functions:\\n\\n- initialize() - Initializes event handlers for buttons. Calls other functions on button clicks.\\n\\n- sendNotification() - Sends a new notification to the database. Validates input, checks if receiver exists, saves notification. \\n\\n- userExists() - Checks if a user exists in the database by their username.\\n\\n- showErrorDialog() - Displays an error alert popup.\\n\\n- saveNotification() - Saves a new notification to the Messages table in the database. \\n\\n- deleteNotifications() - Deletes all notifications for the logged in user from the Messages table.\\n\\n- displayMessages() - Retrieves all notifications for the logged in user and displays them in the text area.\\n\\n- setLoggedInUsername() - Sets the currently logged in username.\\n\\nThe class connects to the database using the Connector class and uses SQL queries and prepared statements to retrieve, insert and delete notification data from the Messages table. It handles the core functionality of sending, receiving and deleting user notifications.\&quot;,\&quot;/src/main/java/Pages/CalculateSalaryAdminPage.java\&quot;:\&quot;This Java file contains the CalculateSalaryAdminPage class which handles the functionality for calculating and managing employee salaries in the admin section.\\n\\nKey functions:\\n\\n- initialize() - Sets up event handlers for buttons like calculating salary, saving to file, adding new salary record etc. \\n\\n- addSalaryRecord() - Inserts a new salary record into the Salaries database table based on input fields. Performs validation.\\n\\n- positionExists() - Checks if a position name exists in the Positions table. \\n\\n- calculateSalary() - Calculates gross, net salary in BYN, USD, RUB currencies based on input fields. Displays in alert.\\n\\n- showErrorDialog() - Displays error alert popup.\\n\\n- saveSalaryTableToFile() - Queries Salary table, writes records to a text file with formatting.\\n\\n- get/set FXML fields - Connects Java code to FXML UI elements like text fields, buttons.\\n\\nSo in summary, it handles the backend logic for calculating salaries, adding/validating records to the database, and saving/displaying results when using the admin salary management section of the application.\&quot;,\&quot;/src/main/java/Pages/Main.java\&quot;:\&quot;This Java file is the main entry point for launching multiple client threads.\\n\\nKey things it does:\\n\\n- Defines a main() method that will be called when the program starts\\n- Sets a variable numberOfClients to specify how many client threads to launch\\n- Calls a launchClients() method, passing in the numberOfClients\\n- The launchClients() method:\\n  - Loops from 0 to numberOfClients\\n  - On each iteration:\\n    - Creates a new Thread for a ClientApp\\n    - Starts the thread\\n  - This spawns the desired number of client threads concurrently\\n- The ClientApp thread runs the launchClient() method, which presumably contains the client logic\\n\\nSo in summary, it:\\n\\n- Specifies the number of client threads to launch\\n- Loops to spawn that number of client threads concurrently \\n- Each client thread runs the ClientApp launchClient() method\\n\\nThe main purposes are to:\\n\\n1. Act as the entry point for the application\\n2. Coordinate launching multiple client threads concurrently\\n3. Delegate the actual client logic to the ClientApp class\&quot;,\&quot;/src/main/java/Database/TestDatabaseConnect.java\&quot;:\&quot;This Java file tests the connection to a MySQL database.\\n\\nKey functions:\\n\\n- Imports the necessary SQL classes like Connection and SQLException\\n- Has a main method to run the test\\n- Prints a message to indicate it is testing the MySQL JDBC connection\\n- Tries to establish a Connection to the database using the Connector class\\n- Catches any SQLExceptions and prints an error message\\n- Finally closes the connection using the close method in Connector\\n\\nIn summary:\\n\\n- It tests the database connectivity by establishing a JDBC connection\\n- Prints messages for success/failure \\n- Handles any SQL exceptions\\n- Closes the connection after the test\\n\\nSo in a nutshell, it provides a simple way to test if the application can successfully connect to the MySQL database using JDBC.\&quot;,\&quot;/src/main/java/Pages/MainUserPage.java\&quot;:\&quot;This MainUserPage.java file is the controller class for the main user page in the JavaFX application.\\n\\nKey functions:\\n\\n- initialize() - Initializes the controller and sets up button click handlers\\n- setLoggedInUsername() - Sets the username text fields based on the logged in user\\n- setupButtons() - Sets click handlers for all the buttons\\n- openLoginPage() - Opens the login page by loading its FXML file\\n- showUserInfo() - Gets user info from database and loads UserStatsPage \\n- getUserInfoFromDatabase() - Queries database for user info\\n- editInfo() - Loads UserEditInfoPage to edit user info\\n- calculateSalary() - Loads CalculateSalaryUserPage \\n- showTickets() - Loads UserTicketsPage\\n- notificationsMenu() - Loads UserNotifications page\\n- handleException() - Handles any exceptions\\n- openNewStage() - Opens a new stage by loading an FXML file\\n- showErrorDialog() - Displays error alert dialog\\n\\nSo in summary, it controls the main user interface, loads other pages/screens, retrieves and passes user data to other controllers, and handles button/menu item clicks.\&quot;,\&quot;/src/main/java/Pages/CalculateSalaryUserPage.java\&quot;:\&quot;This Java file defines a class called CalculateSalaryUserPage that handles the user interface and logic for calculating an employee\\u0027s salary.\\n\\nKey functions:\\n\\n- initialize() - Sets up event handlers for buttons. Calls calculateSalary() when calculate button is clicked.\\n\\n- calculateSalary() - Performs the salary calculation logic:\\n  - Parses input fields to doubles\\n  - Calculates gross salary, net salary, and conversions to BYN, USD, RUB currencies\\n  - Displays results in an alert dialog\\n\\n- showErrorDialog() - Displays an error alert if invalid input is entered\\n\\n- FXML fields - Connect the Java code to the UI elements defined in the FXML file \\n\\n- Buttons\\n  - SalaryPageBack - Goes back to previous page\\n  - SalaryPageCalculateButton - Calls calculateSalary()\\n\\n- TextFields \\n  - For entering base salary, bonus, hours worked, rate per hour, tickets fine \\n\\n- Calculates gross salary, deducts taxes, and displays results in different currencies when the calculate button is clicked. Also handles invalid input.\\n\\nSo in summary, it connects the Java code to the UI, handles events and calculations for the salary calculation page.\&quot;,\&quot;/src/main/java/Pages/HelpPage.java\&quot;:\&quot;This HelpPage.java file defines a controller class for the help page in a JavaFX application.\\n\\nKey functions:\\n\\n- It defines FXML elements that will be used on the help page like buttons, text fields, etc through @FXML annotations.\\n\\n- initialize() method is called after the FXML file is loaded to set event handlers. Here it sets an on action handler for the back button to hide the current window. \\n\\n- It allows accessing and updating the FXML elements from the controller class. For example to populate text fields, handle button clicks etc. \\n\\n- Acts as a bridge between the FXML markup and Java code for the help page. Any interactions/logic on this page can be handled from this controller class.\\n\\n- Provides a way to modularize the help page functionality separately from other pages. Other controllers can call methods in this class to display help.\\n\\nSo in summary, it defines the controller for the help page FXML file to handle user interactions and link the view (FXML) to application logic for that page.\&quot;,\&quot;/src/main/java/Pages/MainAdminPage.java\&quot;:\&quot;This MainAdminPage.java file is the controller class for the main admin page in a JavaFX application.\\n\\nKey functions:\\n\\n- initialize() - Sets up the button click handlers.\\n\\n- setupButtons() - Defines the action listeners for each button.\\n\\n- openTickets() - Opens the PenaltiesPage screen. \\n\\n- sendMessage() - Opens the MessagePage screen.\\n\\n- CalculateSalary() - Opens the CalculateSalaryAdminPage screen. \\n\\n- addEmployee() - Opens the AddEmployee screen.\\n\\n- enterToRemove() - Gets employee username to remove and calls removeEmployee().\\n\\n- removeEmployee() - Removes employee and user records from the database.\\n\\n- enterInfo() - Gets employee name and calls searchEmployee().\\n\\n- searchEmployee() - Opens the SearchEmployee screen.\\n\\n- employeesList() - Opens the Employees screen. \\n\\n- openLoginPage() - Opens the LoginPage screen and hides current stage.\\n\\n- Various dialog methods for showing alerts.\\n\\n- Sets the logged in username text.\\n\\nIt controls navigation between the different admin screens and handles database operations like adding, removing and searching for employees. The buttons trigger navigation or database methods.\&quot;,\&quot;/src/main/java/module-info.java\&quot;:\&quot;This module-info.java file defines a Java module named com.main.k.\\n\\nThe key functions of this file are:\\n\\n- It requires other modules - javafx.controls, javafx.fxml, java.sql, mysql.connector.j. This makes classes from these modules available to this module.\\n\\n- It opens the package start to javafx.fxml. This allows FXML documents to access classes in the start package. \\n\\n- It exports the packages client and start. This makes classes in these packages available to other modules that require this module.\\n\\n- It defines the module name as com.main.k. This uniquely identifies this module on the module path.\\n\\n- It defines this file as the module descriptor for the com.main.k module. The Java runtime will use this file to understand the dependencies and accessibility of classes in this module.\\n\\nSo in summary, it defines the module and its dependencies, and controls which packages are accessible to other modules and the FXML loader for view definition files. This allows proper modularization and encapsulation of the codebase.\&quot;,\&quot;/src/main/java/Pages/LoginPage.java\&quot;:\&quot;This LoginPage.java file is responsible for handling the login functionality of the application.\\n\\nKey functions:\\n\\n- initialize() - Sets event handlers for buttons and image view.\\n\\n- openHelpPage() - Opens the help page FXML. \\n\\n- getRoleFromDatabase() - Queries the database to get the user\\u0027s role based on username and password.\\n\\n- handleLoginButtonAction() - Handles login button click. Validates credentials and opens main page.\\n\\n- checkCredentials() - Checks if login credentials are valid. \\n\\n- showErrorDialog() - Displays error alert dialog.\\n\\n- openMainPage() - Opens the main page FXML based on user role. Passes username.\\n\\n- openRegPage() - Opens registration page FXML.\\n\\nIt provides the UI elements and logic to:\\n\\n- Display the login page\\n- Validate login credentials by querying database \\n- Handle login button click\\n- Open main or help pages based on user actions\\n- Display error messages\\n\\nSo in summary, it manages the login workflow and user authentication.\&quot;,\&quot;/src/main/java/Pages/RegPage.java\&quot;:\&quot;This Java file defines the RegPage class which handles the registration page functionality of a JavaFX application.\\n\\nKey functions:\\n\\n- initialize() - Initializes event handlers for buttons. Calls registerUser() on registration button click and openLoginPage() on back button click.\\n\\n- registerUser() - Handles user registration by:\\n\\n  - Validating passwords match\\n\\n  - Checking for duplicate username in database\\n\\n  - Inserting new user record into users table\\n\\n  - Updating employee record with new username\\n\\n  - Showing success/error alerts\\n\\n- determineRole() - Determines user role based on department \\n\\n- showErrorDialog() - Displays error alert popup\\n\\n- openLoginPage() - Loads and displays the login page FXML on back button click\\n\\nMain responsibilities:\\n\\n- Handle form input validation and database operations for user registration\\n- Display success/error messages to user\\n- Transition to login page on registration completion or back button click\\n\\nSo in summary, it manages the registration workflow and database integration for registering a new user account.\&quot;,\&quot;/src/main/java/Pages/SearchEmployee.java\&quot;:\&quot;This Java file defines a class called SearchEmployee that handles searching for employee information from a database.\\n\\nThe key functions are:\\n\\n- initialize() - Initializes the UI elements and sets an action for the back button to close the window.\\n\\n- search(String fullName) - Queries the database for an employee matching the given full name. Handles any SQL exceptions. \\n\\n- updateUIWithEmployeeInfo(ResultSet resultSet) - Parses the result set and builds a string of the employee details to display in the text area. Handles if no employee is found.\\n\\n- It connects to the database using the Connector class. \\n\\n- Uses a prepared statement to query the database with a full name parameter to search for an employee.\\n\\n- If an employee is found, it extracts all the fields from the result set and builds a string to display the details.\\n\\n- If no employee is found, it updates the text area to indicate that.\\n\\nSo in summary, it allows searching an employee database by full name, queries the database, extracts the results, builds a display string and updates the UI with the employee details or a \\\&quot;not found\\\&quot; message.\&quot;,\&quot;/src/main/java/server/Server.java\&quot;:\&quot;This Java file defines a server that listens for client connections on port 12345.\\n\\nKey functions:\\n\\n- main() - The entry point of the server. It initializes an ExecutorService thread pool and ServerSocket to listen for connections on port 12345.\\n\\n- accept() - Blocks and accepts new client connections from the ServerSocket. Each new connection is represented by a Socket.\\n\\n- ClientHandler - A Runnable class that handles communication with a single client. A new ClientHandler instance is created for each accepted connection and submitted to the ExecutorService thread pool. \\n\\n- executorService.submit() - Submits the ClientHandler to the thread pool to handle the client connection in a separate thread, allowing the server to continue accepting new connections concurrently.\\n\\n- executorService.shutdown() - Shuts down the thread pool gracefully when the server is stopped.\\n\\nSo in summary, it runs a multi-threaded server that accepts client connections concurrently using a thread pool. Each connection is handled asynchronously by a separate ClientHandler thread to allow scalable handling of multiple clients.\&quot;,\&quot;/src/main/java/Database/Connector.java\&quot;:\&quot;This Connector.java file is used to establish a connection to a MySQL database and manage that connection.\\n\\nThe key functions are:\\n\\n- connect() - Establishes the connection to the database by loading the MySQL JDBC driver, connecting to the database URL, and returning the Connection object.\\n\\n- close() - Closes the database connection if it is open. This is important to call to properly clean up resources. \\n\\n- connection - A static Connection field that holds the active database connection. This allows other classes to access the connection without having to re-establish it each time.\\n\\nIn summary:\\n\\n- It loads the MySQL JDBC driver \\n- Connects to the database using the URL, username, and password\\n- Stores the Connection in a static field for reuse\\n- Provides methods to get the connection or close it\\n\\nThis allows other classes to simply call Connector.connect() to get a database connection without having to handle the details of establishing and closing the connection themselves. It centralizes the connection management logic in one place.\&quot;,\&quot;/src/main/java/Pages/AddEmployee.java\&quot;:\&quot;This Java file defines a controller class for an FXML view that allows adding new employees to a database.\\n\\nKey functions:\\n\\n- initialize() - Sets up event handlers for buttons\\n- setupButtons() - Handles button click events:\\n  - AddEmployeeBack closes the stage \\n  - AddEmployeeAdd calls addEmployee() to insert a new record\\n- addEmployee() - Inserts employee data into the database table:\\n  - Gets field values from UI\\n  - Connects to database\\n  - Prepares and executes an INSERT statement\\n  - Shows success/error alerts\\n- closeStage() - Closes the current stage \\n- showErrorDialog() - Displays error alert\\n- clearFields() - Clears all text fields after a successful add\\n\\nSo in summary, it:\\n\\n- Handles the UI interactions for adding an employee\\n- Connects to the database \\n- Inserts a new employee record on button click\\n- Displays success/error messages\\n- Resets the form fields after adding\&quot;,\&quot;/src/main/java/server/ClientHandler.java\&quot;:\&quot;This ClientHandler.java file defines a class that implements the Runnable interface. It is used to handle communication with a client socket in a separate thread.\\n\\nKey functions:\\n\\n- Constructor takes a Socket object representing the client connection. This socket is stored as an instance variable.\\n\\n- The run() method is overridden to define the logic that will run in the thread. \\n\\n- It uses BufferedReader and PrintWriter to read from and write to the client socket streams.\\n\\n- It reads lines of input from the client using reader.readLine() in a loop. \\n\\n- Each line of input is printed to the console for logging purposes.\\n\\n- The input could be processed and a response sent back to the client if needed.\\n\\n- Any exceptions are caught and printed to avoid crashing the thread.\\n\\n- The socket streams are closed in a try-with-resources block to ensure proper cleanup.\\n\\nSo in summary, it runs in a separate thread to handle communication with a connected client socket, reading requests and optionally responding, while logging the input. This allows the server to handle multiple clients concurrently.\&quot;,\&quot;/src/main/java/Pages/UserTicketsPage.java\&quot;:\&quot;This Java file defines the UserTicketsPage class which is used to display a user\\u0027s ticket/penalty information page in a JavaFX application.\\n\\nKey functions:\\n\\n- initialize() - Sets an event handler for the back button to close the window.\\n\\n- setLoggedInUsername() - Sets the logged in username and loads penalty data from the database. \\n\\n- loadPenaltiesData() - Queries the database for all penalties for the given username, calculates total sum, and displays the results in the UI text areas.\\n\\n- showErrorDialog() - Displays an error alert dialog if there is an error loading data.\\n\\nThe class loads penalty data from the database table for the given logged in user, displays the details of each penalty along with a total sum in text areas on the UI. It provides functionality to view and go back from the user tickets page. The database connection and querying is handled here to populate the UI with the user\\u0027s ticket information.\&quot;,\&quot;/src/main/java/Pages/UserEditInfoPage.java\&quot;:\&quot;This Java file defines the UserEditInfoPage class which handles the user interface and logic for editing a user\\u0027s profile information on a page.\\n\\nKey functions:\\n\\n- initialize() - Sets up event handlers for the buttons\\n- changeLogin() - Prompts user to change their login and updates the database\\n- changePassword() - Prompts user to change their password and updates the database  \\n- changeNumber() - Prompts user to change their phone number and updates the database\\n- changeMiddlename() - Prompts user to change their middle name and updates the database\\n- changeName() - Prompts user to change their first name and updates the database \\n- changeLastname() - Prompts user to change their last name and updates the database\\n- setUserInfo() - Sets the currently logged in username\\n- showInputDialog() - Displays a text input dialog prompt \\n- showSuccessDialog() - Displays a success alert\\n- showErrorDialog() - Displays an error alert\\n- Database update methods like updateLogin(), updatePassword() etc - Handles updating the relevant database table with the new user information\\n\\nSo in summary, it provides the UI and logic to allow a user to edit various profile fields like name, login, password etc and updates the database with the changes.\&quot;,\&quot;/src/main/java/client/ClientApp.java\&quot;:\&quot;This ClientApp.java file is the main entry point for the JavaFX client application.\\n\\nKey functions:\\n\\n- It extends Application, which is required for JavaFX applications.\\n\\n- Defines the main() method which launches the application by calling launch().\\n\\n- Overrides the start() method, which is called after launch(). This method calls openLoginPage() to display the initial login page.\\n\\n- openLoginPage() loads the LoginPage.fxml layout file using FXMLLoader and sets it as the root node of a new Scene. This scene is set on the primary stage and displayed.\\n\\n- launchClient() provides a way to programmatically launch the application, separate from the main() method.\\n\\nSo in summary:\\n\\n- It defines the main entry point for the JavaFX client app\\n- Loads and displays the initial login page UI \\n- Provides a way to launch the app programmatically\\n- Follows the standard JavaFX application lifecycle by overriding start()\\n\\nSo this file sets up and launches the JavaFX application, displaying the initial login view. It acts as the central entry point and coordinator for the client app.\&quot;,\&quot;/src/main/java/Pages/PenaltiesPage.java\&quot;:\&quot;This Java file defines the PenaltiesPage class which handles functionality related to penalties (tickets/fines) in the application.\\n\\nKey functions:\\n\\n- initialize() - Sets event handlers for buttons\\n\\n- saveTicketsToFile() - Saves penalties data from database to a text file \\n\\n- showAllTickets() - Opens ShowPenaltiesPage to display all penalties \\n\\n- showTickets() - Prompts for username and opens ShowPenaltiesPage to display penalties for that user\\n\\n- openShowTicketsPageForAll()/openShowTicketsPage() - Opens ShowPenaltiesPage window \\n\\n- hasPenaltiesForUser() - Checks if penalties exist for a given username\\n\\n- removeTicket() - Prompts for username and removes penalty from database\\n\\n- addTicket() - Adds new penalty to database when fields are filled\\n\\n- showAlert() - Displays alert popups\\n\\nSo in summary, it provides the backend logic for viewing, adding, removing and exporting penalties data to and from the database through the UI buttons and fields. The ShowPenaltiesPage class is used to display the penalties data.\&quot;,\&quot;/src/main/java/Pages/Employees.java\&quot;:\&quot;This Employees.java file is a JavaFX controller class that handles displaying and saving employee data to a file.\\n\\nKey functions:\\n\\n- initialize() - Called when the view is initialized. Queries the database for all employees and displays the results in a TextArea. Sets click handlers for buttons.\\n\\n- saveEmployeesToFile() - Saves the employee data to a text file. Queries the database, builds a string of the results, and writes it to a file located at the given path. \\n\\n- Connector class - Used to connect to and close the database connection.\\n\\n- PreparedStatement - Used to query the database for all employees. \\n\\n- ResultSet - Stores the results of the database query. \\n\\n- StringBuilder - Used to build the string of employee data to display and save to file. \\n\\n- BufferedWriter/FileWriter - Used to write the string of employee data to a text file.\\n\\nSo in summary, it displays all employees from the database in the UI, and allows saving that data to a text file on button click by querying the database and writing the results.\&quot;,\&quot;/pom.xml\&quot;:\&quot;This is a Maven POM (Project Object Model) file that defines the configuration for a Maven Java project.\\n\\nKey functions:\\n\\n- Defines the project coordinates like groupId, artifactId, version etc. This identifies the project.\\n\\n- Specifies dependencies on external libraries like JavaFX, JUnit, MySQL connector etc. These will be downloaded and made available to the project. \\n\\n- Configures the Maven compiler plugin to compile Java source code to bytecode using Java 21. \\n\\n- Configures the JavaFX Maven plugin to package the project as a self-contained application using jlink. This allows running the project with \\u0027mvn javafx:run\\u0027.\\n\\n- Defines properties like source encoding and JUnit version that can be reused across the POM.\\n\\n- Provides configuration for building the project artifacts, packaging, running tests etc using the default Maven lifecycle goals.\\n\\nSo in summary, it defines all configuration needed for Maven to build, test and package the Java project including dependencies, plugins and default execution goals. This standardizes and automates the build process.\&quot;,\&quot;/src/main/java/Pages/UserStatsPage.java\&quot;:\&quot;This Java file defines the UserStatsPage class which represents the user stats page in a JavaFX application.\\n\\nKey functions:\\n\\n- It loads the FXML layout file for the user stats page using annotations like @FXML. This allows the UI elements to be accessed in code.\\n\\n- initialize() is called after the FXML loading and sets an event handler for the back button to hide the current window. \\n\\n- setUserInfo(String) allows setting the text displayed in the text area widget, to display the user\\u0027s stats. \\n\\n- It provides access to UI elements defined in FXML like the back button and text area, to control their behavior from other classes.\\n\\n- Acts as a controller class for the user stats page, handling user interactions and updating the UI as needed based on data passed to it.\\n\\nSo in summary, it defines the controller and logic for the user stats page UI, loads the layout, and provides methods to update and interact with the UI elements.\&quot;,\&quot;/src/main/java/Pages/ShowPenaltiesPage.java\&quot;:\&quot;This Java file defines a ShowPenaltiesPage class that is used to display penalty/ticket information from a database.\\n\\nKey functions:\\n\\n- initialize() - Initializes the UI elements and sets an action handler for the back button\\n\\n- showAllTickets() - Queries the database for all penalties and displays them in the text area \\n\\n- setUsername() - Sets the username property and calls showTicketsForUser() to filter by that user\\n\\n- showTicketsForUser() - Queries the database for penalties for the given username and displays them\\n\\n- showAlert() - Displays an alert popup window to show errors\\n\\nThe class connects to a MySQL database called \\\&quot;SalarySystem\\\&quot; and queries the \\\&quot;Penalties\\\&quot; table. It retrieves penalty data like fine amount, date, description and aggregates the totals. \\n\\nThe penalties are displayed in a formatted string in the text area. Buttons allow viewing all penalties or filtering by a specific username. Error handling displays alerts on database issues.\\n\\nSo in summary, it provides the UI and logic to display penalty/ticket data from a database, with options to view all or filter by user.\&quot;,\&quot;/src/main/java/Pages/UserPage.java\&quot;:\&quot;This UserPage.java file defines a Java class that represents the user page view in a JavaFX application.\\n\\nKey functions:\\n\\n- Sets up the FXML elements that are defined with @FXML annotations, like buttons, text fields, etc. This links the Java code to the FXML markup.\\n\\n- initialize() method - Called after the FXML elements are initialized. Sets up event handlers.\\n\\n- setUsername() method - Stores the username that is passed in. \\n\\n- setLoggedInUsername() method - Displays the passed in username on the UI and also stores it internally.\\n\\n- closeWindow() method - Handles the back button click by hiding the current window. \\n\\n- It represents the user page view/controller in the MVC pattern. Manages displaying the username and handling button clicks to transition between views.\\n\\nSo in summary, it defines the controller class for the user page view in the JavaFX application. It links the Java code to the FXML markup, handles displaying data on the UI and responding to user interactions.\&quot;}&quot;}" />
  </component>
</project>